# Author		Kannan Thambiah <pygospa@gmail.com>
# Latest version	https://github.com/pygospa/dotfiles


#------------------------------------------------------------------------------
# General settings
#
if-shell 'test "$(uname)" = "Darwin"' 'set-option -g default-terminal xterm-256color'
if-shell 'test "$(uname)" = "Linux"' 'set-option -g default-terminal screen-256color'
set -g display-time 4000		# inital 750 ms is too little, I think
set -s escape-time 0			# We don't want to wate for an escape sequence
set -g status-interval 1		# Update statusbar every second
set -g message-style bg=default,fg=colour009	# Message coloring
# Paul Hinzes hack to get the clipboard working in vim on tmux under macOS
if-shell 'test "$(uname)" = "Darwin"' 'set-option -g default-command "reattach-to-user-namespace -l zsh"'


#------------------------------------------------------------------------------
# General settings
#
# Make's life easier when first-time editing your ~/.tmux.con:
bind r source-file ~/.tmux.conf \; \
	display-message " <--- Reloded configuration file ---> "
#							  #
# Make tmux more like screen (I'm a victim of habbit :/ ) #
#							  #
unbind C-b		# set command prefix to ctrl+a instead of ctrl+b
set -g prefix C-a

unbind l		# switch to last window using C-a C-a
bind C-a last-window

bind a send-prefix	# C-a a will send keys to the parent of a nested tmux

unbind '"'		# Use S for horizontal split
bind S split-window

unbind %		# Use V for vertical split
bind V split-window -h

#							     #
# Make tmux more like vim (I'm also a victim of comfort ;) ) #
#							     #
setw -g mode-keys vi	# vim-style key bindings for copy+choice mode navigation

unbind [		# vim-like switching to copy mode with C-b v
bind v copy-mode

unbind p		# vim-like paste behaviour with C-b p
unbind ]
bind p paste-buffer

# bind -t vi-copy 'v' begin-selection	# vim-like marking+yanking in copy mode
# bind -t vi-copy 'y' copy-selection

bind h select-pane -L	# switching panes by using hjkl instead of arrow keys
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

#		 #
# Other settings #
#		 #
# Using < and > for resizing vertically, A and Y for horizontall (by steps of
# five, rather than ones
bind < resize-pane -L 5
bind > resize-pane -R 5
bind A resize-pane -U 5
bind Y resize-pane -D 5
# UrlView is neat! Install UrlView, configure it to use your favorit browser,
# and then just hit ctrl-A u, whenever there's a url in your active pane.
# You'll figure out, what it'll do, and you're gona love it!
bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "urlview" '$SHELL -c "urlview < /tmp/tmux-buffer"'


#------------------------------------------------------------------------------
# Status line
#
set -g status-bg default	# Make tmux colorful
set -g status-fg colour003
set -g status-justify left	# Tabs aligned to the left of the status bar

# On the left side we want the login information: <tmux[ID]@host>
TNAME='#[fg=colour003]tmux#[fg=colour002][#[fg=colour001]#S#[fg=colour002]]#[fg=colour002]'
THOST='#[fg=colour004]#H#[fg=colour002]'
set -g status-left "#[fg=colour002]<$TNAME@#$THOST> :"
set -g status-left-length 30

# On the right side we want the date and time to be displayed
TDATE='#[fg=colour003]%a, %d.%m.%Y %T'
set -g status-right "#[fg=colour002]|$TDATE#[fg=colour002]|"
set -g status-right-length 50

# And now for the center part:
set -g window-status-format '#I #W'
set -g window-status-current-format '#I #W'
set -g window-status-current-style fg=colour005


#------------------------------------------------------------------------------
# Pane coloring
#
set-option -g pane-active-border-style bg=default,fg=colour005
set-option -g pane-border-style fg=colour002


#------------------------------------------------------------------------------
# Some automated tmux window generating settings
#

# Plain simple zsh in home dir on local machine and attach the tmux on the
# server activating the irssi window (Window 1)
bind H new-window -n home -c $HOME \; \
	split-window -v -p 50 -t 0 \; \
	send-keys 'ssh rasbpi' 'Enter' \; \
	send-keys 'tmux select-window -t 0:1' 'Enter' 'tmux a' 'Enter' \; \
	select-pane -t 0

# My studying setup:
bind E new-window -n edu -c $HOME/edu/cur \; \
	send-keys 'vim' 'Enter' ':NERDTree' 'Enter' \; \
	split-window -v -p 30 -t 0 \; \
	send-keys 'ssh rasbpi' 'Enter' \; \
	send-keys 'tmux select-window -t 0:1' 'Enter' 'tmux a' 'Enter' \; \
	select-pane -t 0

# My rails setup - to be called in a rails root dir, starts up vim, server and
# console
bind R send-keys 'vim' 'Enter' \; \
	send-keys ':NERDTree' 'Enter' \; \
	split-window -v -p 30 -t 0 \; \
	send-keys 'rails c' 'Enter' \; \
	split-window -h -p 30 -t 1 \; \
	send-keys 'guard' 'Enter' \; \
	split-window -v -p 50 -t 1 \; \
	send-keys 'rails s' 'Enter' \; \
	select-pane -t 0

# Unfortunatley at work we use rails 2.x instead of 3.x, so here's the same for
# rails 2.x projects. Also we don't use any specs - bad as well, I know... :/
bind W send-keys 'vim' 'Enter' \; \
	send-keys ':NERDTree' 'Enter' \; \
	split-window -v -p 30 -t 0 \; \
	send-keys 'script/console' 'Enter' \; \
	split-window -v -p 50 -t 1 \; \
	send-keys 'script/server' 'Enter' \; \
	select-pane -t 0

