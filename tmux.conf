# Author:	Kannan Thambiah <pygospa@gmail.com>
# Copyright:	CC BY-SA 4.0 <http://creativecommons.org/licenses/by-sa/4.0>


#		 <---- General settings ---->

# TERM settings for correct coloring and character displays
if-shell 'test "$(uname)" = "Darwin"' 'set-option -g default-terminal xterm-256color'
if-shell 'test "$(uname)" = "Linux"' 'set-option -g default-terminal screen-256color'

# initial default of 750 millisecons is to little, I think
set -g display-time 4000

set -s escape-time 0

# update status bar every second
set -g status-interval 1

# Use utf8
setw -g utf8 on 

# Message coloring
set -g message-fg colour009
set -g message-bg default

# Paul Hinzes hack for vim and tmux under OS X
if-shell 'test "$(uname)" = "Darwin"' 'set-option -g default-command "reattach-to-user-namespace -l zsh"'



#		 <---- Key mappings ---->

# Make's life easier when first-time editing your ~/.tmux.con:
bind r source-file ~/.tmux.conf \; \
display-message " <--- Reloded configuration file ---> "



# <-- Make tmux more like screen (I'm a victim of habbit :/ ) -->

# set command prefix to ctrl+a instead of ctrl+b
unbind C-b
set -g prefix C-a

# switch to last window using C-a C-a
unbind l
bind C-a last-window

# With cntrl-a a we want to send keys to a underlying tmux
bind a send-prefix


# <-- Make tmux more like vim (I'm also a victim of comfort ;) ) -->

# Set vim-style key bindings for copy and coices mode (e.g. hjkl navigation)
setw -g mode-keys vi

# Set vim like switching to copy mode with C-b v instead of C-b [
unbind [
bind v copy-mode

# Set vim like paste behaviour with C-b p
unbind p
unbind ]
bind p paste-buffer

# Set vim like marking and yanking in copy mode
bind -t vi-copy 'v' begin-selection
bind -t vi-copy 'y' copy-selection

# Switch panes by using hjkl instead of arrow keys
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R


# <-- Some other more comfortable bindings: 

# Like in Screen, use S for horrizontal split instead of "
unbind '"'
bind S split-window

# Using V for vertical split instead of %
unbind %
bind V split-window -h

# Using < and > for resizing vertically, A and Y for horizontall (by steps of
# five, rather than ones
bind < resize-pane -L 5
bind > resize-pane -R 5
bind A resize-pane -U 5
bind Y resize-pane -D 5

# UrlView is neat! Install UrlView, configure it to use your favorit browser,
# and then just hit ctrl-A u, whenever there's a url in your active pane.
# You'll figure out, what it'll do, and you're gona love it!

bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "urlview" '$SHELL -c "urlview < /tmp/tmux-buffer"'


#		<---- Status bar ---->

# Let's add some colour to our life 
set -g status-bg default
set -g status-fg colour003

# we want everything to be utf-8
set -g status-utf8 on

# Alignment: the tabs should appear in the center of the status bar
set -g status-justify left

# On the left side we want the login information: <tmux[ID]@host>
TNAME='#[fg=colour003]tmux#[fg=colour002][#[fg=colour001]#S#[fg=colour002]]#[fg=colour002]' 
THOST='#[fg=colour004]#H#[fg=colour002]'
set -g status-left "#[fg=colour002]<$TNAME@#$THOST> :"
set -g status-left-length 30

# On the right side we want the date and time to be displayed
TDATE='#[fg=colour003]%a, %d.%m.%Y %T'
set -g status-right "#[fg=colour002]|$TDATE#[fg=colour002]|"
set -g status-right-length 50

# And now for the center part:
set -g window-status-format '#I #W'
set -g window-status-current-format '#I #W'
set -g window-status-current-fg 'colour005'


#		<--- Pane colouring ---->

set-option -g pane-active-border-fg colour005
set-option -g pane-active-border-bg default
set-option -g pane-border-fg colour002


#		<---- Some automated tmux window generations ---->

# Plain simple zsh in home dir on local machine and attach the tmux on the
# server activating the irssi window (Window 1)
bind H new-window -n home -c $HOME \; \
	split-window -v -p 50 -t 0 \; \
	send-keys 'ssh rasbpi' 'Enter' \; \
	send-keys 'tmux select-window -t 0:1' 'Enter' 'tmux a' 'Enter' \; \
	select-pane -t 0

# My studying setup:
bind E new-window -n edu -c $HOME/edu/cur \; \
	send-keys 'vim' 'Enter' ':NERDTree' 'Enter' \; \
	split-window -v -p 30 -t 0 \; \
	send-keys 'ssh rasbpi' 'Enter' \; \
	send-keys 'tmux select-window -t 0:1' 'Enter' 'tmux a' 'Enter' \; \
	select-pane -t 0

# My rails setup - to be called in a rails root dir, starts up vim, server and
# console
bind R send-keys 'vim' 'Enter' \; \
	send-keys ':NERDTree' 'Enter' \; \
	split-window -v -p 30 -t 0 \; \
	send-keys 'rails c' 'Enter' \; \
	split-window -h -p 30 -t 1 \; \
	send-keys 'guard' 'Enter' \; \
	split-window -v -p 50 -t 1 \; \
	send-keys 'rails s' 'Enter' \; \
	select-pane -t 0

# Unfortunatley at work we use rails 2.x instead of 3.x, so here's the same for
# rails 2.x projects. Also we don't use any specs - bad as well, I know... :/
bind W send-keys 'vim' 'Enter' \; \
	send-keys ':NERDTree' 'Enter' \; \
	split-window -v -p 30 -t 0 \; \
	send-keys 'script/console' 'Enter' \; \
	split-window -v -p 50 -t 1 \; \
	send-keys 'script/server' 'Enter' \; \
	select-pane -t 0

